#!/usr/bin/env python

import json
import datetime
import os
import sys

def load_tasks(date):
    current_time = datetime.datetime.now().time()
    if current_time.hour == 0 and current_time.minute == 0:
        # It's midnight, reset the tasks
        tasks = {
            'morning': ['Brushing teeth', 'Brushing hair', 'breakfast'],
            'noon': ['lunch'],
            'evening': ['Taking a shower', 'diner', 'Brushing teeth']
        }
    else:
        filename = f"tasks_{date}.json"
        if os.path.exists(filename):
            with open(filename, 'r') as f:
                tasks = json.load(f)
        else:
            tasks = {
                'morning': ['Brushing teeth', 'Brushing hair', 'breakfast'],
                'noon': ['lunch'],
                'evening': ['Taking a shower', 'diner', 'Brushing teeth']
            }
    return tasks

def save_tasks(tasks, date):
    filename = f"tasks_{date}.json"
    with open(filename, 'w') as f:
        json.dump(tasks, f)

def show_tasks(tasks):
    if tasks['morning']:
        print("Morning tasks:")
        for i, task in enumerate(tasks['morning']):
            print(f"{i+1}. {task}")
    else:
        print("No morning tasks.")

    if 'noon' in tasks:
        print("\nNoon tasks:")
        for i, task in enumerate(tasks['noon']):
            print(f"{i+1}. {task}")

    if tasks['evening']:
        print("\nEvening tasks:")
        for i, task in enumerate(tasks['evening']):
            print(f"{i+1}. {task}")
    else:
        print("No evening tasks.")

def add_task(tasks, time, task):
    if time == 'morning':
        tasks['morning'].append(task)
    elif time == 'noon':
        tasks['noon'].append(task)
    elif time == 'evening':
        tasks['evening'].append(task)
    return tasks

def remove_task(tasks, time, task_number):
    if time == 'morning':
        try:
            task = tasks['morning'].pop(task_number-1)
            print(f"Task '{task}' marked as done!")
        except IndexError:
            print("Invalid task number")
    elif time == 'noon':
        try:
            task = tasks['noon'].pop(task_number-1)
            print(f"Task '{task}' marked as done!")
        except IndexError:
            print("Invalid task number")
    elif time == 'evening':
        try:
            task = tasks['evening'].pop(task_number-1)
            print(f"Task '{task}' marked as done!")
        except IndexError:
            print("Invalid task number")
    return tasks

def show_help():
    print("Usage: python tasks.py <command> [args]")
    print("Available commands:")
    print("  show: Show all tasks")
    print("  add morning <task>: Add a morning task")
    print("  add noon <task>: Add a noon task")
    print("  add evening <task>: Add an evening task")
    print("  remove morning <task_number>: Remove a morning task")
    print("  remove noon <task_number>: Remove a noon task")
    print("  remove evening <task_number>: Remove an evening task")
    print("  help: Show this help message")

def main():
    if len(sys.argv) == 1:
        show_help()
        return

    command = sys.argv[1]
    date = datetime.date.today()
    tasks = load_tasks(date)

    if command == 'show':
        show_tasks(tasks)
    elif command.startswith('add'):
        if len(sys.argv) < 4:
            show_help()
            return
        time, task = sys.argv[2], ' '.join(sys.argv[3:])
        tasks = add_task(tasks, time, task)
        save_tasks(tasks, date)
    elif command.startswith('remove'):
        if len(sys.argv) < 4:
            show_help()
            return
        time, task_number = sys.argv[2], int(sys.argv[3])
        tasks = remove_task(tasks, time, task_number)
        save_tasks(tasks, date)
    elif command == 'help':
        show_help()
    else:
        show_help()

if __name__ == '__main__':
    main()
